local M = {}
function M.get_highlight_groups()
    local palette = require("okcolors.palette")
    local highlight_groups = {
        base = {
            Normal  = { fg = palette.tx, bg = palette.bg },
            Comment = { fg = palette.tx3 },
        },
        syntax_groups = {
            Constant       = { fg = palette.cyan },
            String         = { fg = palette.green },
            Character      = { link = "String" },
            Number         = { link = "Constant" },
            Boolean        = { link = "Constant" },
            Float          = { link = "Constant" },

            Identifier     = {},
            Function       = { italic = true },

            Statement      = { fg = palette.purple },
            Conditional    = { link = "Statement" },
            Repeat         = { link = "Statement" },
            Label          = { link = "Statement" },
            Operator       = {},
            Keyword        = { link = "Statement" },
            Exception      = { fg = palette.orange },

            PreProc        = { fg = palette.yellow },
            Include        = { link = "PreProc" },
            Define         = { link = "PreProc" },
            Macro          = { link = "PreProc" },
            PreCondit      = { link = "PreProc" },

            Type           = { fg = palette.blue },
            StorageClass   = { link = "Type" },
            Structure      = { link = "Type" },
            Typedef        = { link = "Type" },

            Special        = { fg = palette.yellow },
            SpecialChar    = { link = "Special" },
            Tag            = { link = "Special" },
            Delimiter      = { fg = palette.tx3 },
            SpecialComment = { link = "Special" },
            Debug          = { fg = palette.orange },

            Underlined     = { fg = palette.blue, underline = true },
            Ignore         = { fg = palette.tx3 },
            Error          = { fg = palette.bg, bg = palette.red },
            Todo           = { fg = palette.yellow },
        },
        -- https://github.com/nvim-treesitter/nvim-treesitter/blob/master/CONTRIBUTING.md
        tree_sitter = {
            -- Identifiers
            ["@variable"]                            = { link = "Identifier" },
            ["@variable.builtin"]                    = { link = "Statement" },
            ["@variable.parameter"]                  = { link = "@variable" },
            ["@variable.member"]                     = { link = "@variable" },
            ["@constant"]                            = { link = "Constant" },
            ["@constant.builtin"]                    = { link = "@constant" },
            ["@constant.macro"]                      = { link = "@constant" },
            ["@module"]                              = { link = "Include" },
            ["@module.builtin"]                      = { link = "@module" },
            ["@label"]                               = { link = "Label" },
            -- Literals
            ["@string"]                              = { link = "String" },
            ["@string.regexp"]                       = { fg = palette.yellow },
            ["@string.escape"]                       = { fg = palette.yellow },
            ["@string.special"]                      = { link = "Special" },
            ["@string.special.symbol"]               = { link = "Identifier" },
            ["@string.special.url"]                  = { link = "Underlined" },
            ["@string.special.path"]                 = { link = "Directory" },
            ["@character"]                           = { link = "Character" },
            ["@character.special"]                   = { link = "SpecialChar" },
            ["@boolean"]                             = { link = "Boolean" },
            ["@number"]                              = { link = "Number" },
            ["@number.float"]                        = { link = "Float" },
            -- Types
            ["@type"]                                = { link = "Type" },
            ["@type.builtin"]                        = { link = "@type" },
            ["@property"]                            = { link = "Identifier" },
            --- Functions
            ["@function"]                            = { link = "Function" },
            ["@function.builtin"]                    = { link = "@function" },
            ["@function.call"]                       = { link = "@function" },
            ["@function.macro"]                      = { link = "Macro" },
            ["@function.method"]                     = { link = "@function" },
            ["@function.method.call"]                = { link = "@function" },
            ["@constructor"]                         = { link = "@function" },
            ["@operator"]                            = { link = "Operator" },
            -- Keywords
            ["@keyword"]                             = { link = "Keyword" },
            ["@keyword.operator"]                    = { link = "Keyword" },
            ["@keyword.debug"]                       = { link = "Debug" },
            ["@keyword.exception"]                   = { link = "Exception" },
            ["@keyword.directive"]                   = { link = "PreProc" },
            ["@keyword.directive.define"]            = { link = "Define" },
            -- Punctuation
            ["@punctuation.delimiter"]               = { link = "Delimiter" },
            ["@punctuation.bracket"]                 = { fg = palette.tx2 },
            ["@punctuation.special"]                 = { link = "Special" },
            -- Comments
            ["@comment"]                             = { link = "Comment" },
            ["@comment.error"]                       = { fg = palette.red },
            ["@comment.warning"]                     = { fg = palette.orange },
            ["@comment.todo"]                        = { fg = palette.tx3, bold = true },
            ["@comment.note"]                        = { fg = palette.tx3, bold = true },
            -- Markup
            ["@tag"]                                 = { link = "Tag" },
            ["@tag.attribute"]                       = { link = "@variable.parameter" },
            ["@tag.delimiter"]                       = { link = "delimiter" },
            ["@markup.strong"]                       = { bold = true },
            ["@markup.italic"]                       = { italic = true },
            ["@markup.strikethrough"]                = { strikethrough = true },
            ["@markup.underline"]                    = { underline = true },
            ["@markup.heading"]                      = { fg = palette.tx, bold = true },
            ["@markup.heading.1"]                    = { link = "@markup.heading" },
            ["@markup.heading.2"]                    = { link = "@markup.heading" },
            ["@markup.heading.3"]                    = { link = "@markup.heading" },
            ["@markup.heading.4"]                    = { link = "@markup.heading" },
            ["@markup.heading.5"]                    = { link = "@markup.heading" },
            ["@markup.heading.6"]                    = { link = "@markup.heading" },
            ["@markup.quote"]                        = { fg = palette.tx2 },
            ["@markup.math"]                         = { fg = palette.green },
            ["@markup.link"]                         = { fg = palette.blue },
            ["@markup.link.label"]                   = { fg = palette.blue },
            ["@markup.link.url"]                     = { fg = palette.blue, underline = true },
            ["@markup.raw"]                          = { fg = palette.tx2 },
            ["@markup.raw.block"]                    = { link = "@markup.raw" },
            ["@markup.list"]                         = { fg = palette.tx },
            ["@markup.list.checked"]                 = { fg = palette.green },
            ["@markup.list.unchecked"]               = { fg = palette.tx },
            --- Non-highlighting captures
            ["@conceal"]                             = { link = "Conceal" },
            ["@conceal.markdown"]                    = { fg = palette.tx2 },
            ["@conceal.markdown_inline"]             = { fg = palette.tx2 },
            --- Semantic
            ["@lsp.type.enum"]                       = { link = "@type" },
            ["@lsp.type.interface"]                  = { link = "@interface" },
            ["@lsp.type.keyword"]                    = { link = "@keyword" },
            ["@lsp.type.namespace"]                  = { link = "@namespace" },
            ["@lsp.type.namespace.python"]           = { link = "@variable" },
            ["@lsp.type.parameter"]                  = { link = "@parameter" },
            ["@lsp.type.property"]                   = { link = "@property" },
            ["@lsp.type.variable.svelte"]            = { link = "@variable" },
            ["@lsp.typemod.function.defaultLibrary"] = { link = "@function.builtin" },
            ["@lsp.typemod.operator.injected"]       = { link = "@operator" },
            ["@lsp.typemod.string.injected"]         = { link = "@string" },
            ["@lsp.typemod.variable.constant"]       = { link = "@constant" },
            ["@lsp.typemod.variable.defaultLibrary"] = { link = "@variable.builtin" },
            ["@lsp.typemod.variable.injected"]       = { link = "@variable" },
        },
        ui = {
            ColorColumn       = { bg = palette.bg2 },
            Conceal           = { fg = palette.tx2, bg = palette.bg2 },
            CurSearch         = { fg = palette.bg, bg = palette.magenta },
            CursorLine        = { bg = palette.bg2 },
            CursorLineNr      = { fg = palette.tx2 },
            Directory         = { fg = palette.blue, bold = true },
            ErrorMsg          = { fg = palette.red, bold = true },
            FloatBorder       = { fg = palette.blue },
            FloatTitle        = { bold = true },
            FoldColumn        = { fg = palette.tx2 },
            Folded            = { bg = palette.bg2 },
            IncSearch         = { link = "CurSearch" },
            LineNr            = { fg = palette.tx3 },
            MatchParen        = { bg = palette.bg3 },
            ModeMsg           = { fg = palette.tx2 },
            MoreMsg           = { fg = palette.green },
            NonText           = { fg = palette.ui },
            NormalFloat       = { fg = palette.tx, bg = palette.bg2 },
            NormalNC          = { fg = palette.tx2 },
            NvimInternalError = { link = "ErrorMsg" },
            Pmenu             = { fg = palette.tx, bg = palette.ui },
            PmenuSel          = { fg = palette.tx, bg = palette.ui3, bold = true },
            Question          = { fg = palette.yellow },
            Search            = { fg = palette.magenta, bold = true, underline = true },
            SignColumn        = { fg = palette.tx },
            SpecialKey        = { fg = palette.blue },
            StatusLine        = { fg = palette.tx2, bold = true },
            StatusLineNC      = { fg = palette.tx3 },
            StatusLineTerm    = { fg = palette.bg, bg = palette.green, bold = true },
            StatusLineTermNC  = { fg = palette.bg2, bg = palette.green },
            Substitute        = { link = "IncSearch" },
            TabLine           = { fg = palette.tx2, bg = palette.ui },
            TabLineFill       = {},
            TabLineSel        = { fg = palette.tx, bg = palette.ui2, bold = true },
            Title             = { bold = true },
            VertSplit         = { fg = palette.ui, bg = palette.ui },
            Visual            = { bg = palette.bg3 },
            WarningMsg        = { fg = palette.red, bold = true },
            WildMenu          = { link = "IncSearch" },
        },
        diagnostics = {
            DiagnosticError            = { fg = palette.red },
            DiagnosticHint             = { fg = palette.yellow },
            DiagnosticInfo             = { fg = palette.blue },
            DiagnosticWarn             = { fg = palette.orange },
            DiagnosticDefaultError     = { link = "DiagnosticError" },
            DiagnosticDefaultHint      = { link = "DiagnosticHint" },
            DiagnosticDefaultInfo      = { link = "DiagnosticInfo" },
            DiagnosticDefaultWarn      = { link = "DiagnosticWarn" },
            DiagnosticFloatingError    = { link = "DiagnosticError" },
            DiagnosticFloatingHint     = { link = "DiagnosticHint" },
            DiagnosticFloatingInfo     = { link = "DiagnosticInfo" },
            DiagnosticFloatingWarn     = { link = "DiagnosticWarn" },
            DiagnosticSignError        = { link = "DiagnosticError" },
            DiagnosticSignHint         = { link = "DiagnosticHint" },
            DiagnosticSignInfo         = { link = "DiagnosticInfo" },
            DiagnosticSignWarn         = { link = "DiagnosticWarn" },
            DiagnosticUnderlineError   = { sp = palette.red, undercurl = true },
            DiagnosticUnderlineHint    = { sp = palette.yellow, undercurl = true },
            DiagnosticUnderlineInfo    = { sp = palette.blue, undercurl = true },
            DiagnosticUnderlineWarn    = { sp = palette.orange, undercurl = true },
            DiagnosticVirtualTextError = { fg = palette.red, bg = palette.bg2 },
            DiagnosticVirtualTextHint  = { fg = palette.yellow, bg = palette.bg2 },
            DiagnosticVirtualTextInfo  = { fg = palette.blue, bg = palette.bg2 },
            DiagnosticVirtualTextWarn  = { fg = palette.orange, bg = palette.bg2 },
        },
        diffs = {
            DiffAdd         = { fg = palette.green },
            DiffChange      = { fg = palette.yellow },
            DiffDelete      = { fg = palette.red },
            DiffText        = { fg = palette.yellow, bold = true },
            diffAdded       = { link = "DiffAdd" },
            diffRemoved     = { link = "DiffDelete" },
            diffChanged     = { link = "DiffChange" },
            SignAdd         = { link = "DiffAdd" },
            SignDelete      = { link = "DiffDelete" },
            SignChange      = { link = "DiffChange" },
            GitSignsAdd     = { link = "SignAdd" },
            GitSignsDelete  = { link = "SignDelete" },
            GitSignsChange  = { link = "SignChange" },
            ["@diff.plus"]  = { link = "DiffAdd" },
            ["@diff.minus"] = { link = "DiffDelete" },
            ["@diff.delta"] = { link = "DiffChange" },
        },
        telescope = {
            TelescopeBorder       = { link = "FloatBorder" },
            TelescopeTitle        = { link = "FloatTitle" },
            TelescopeNormal       = { link = "NormalFloat" },
            TelescopePreviewMatch = { link = "IncSearch" },
            TelescopeMatching     = { link = "Search" },
        },
        cmp = {
            CmpItemAbbr           = { fg = palette.tx2 },
            CmpItemAbbrDeprecated = { fg = palette.tx2, strikethrough = true },
            CmpItemAbbrMatch      = { fg = palette.tx, bold = true },
            CmpItemAbbrMatchFuzzy = { fg = palette.tx, bold = true },
            CmpItemKind           = { fg = palette.tx2 },
            CmpItemKindClass      = { link = "StorageClass" },
            CmpItemKindFunction   = { link = "Function" },
            CmpItemKindInterface  = { link = "Type" },
            CmpItemKindMethod     = { link = "PreProc" },
            CmpItemKindSnippet    = { link = "String" },
            CmpItemKindVariable   = { link = "Identifier" },
        },
    }
    return highlight_groups
end

return M
